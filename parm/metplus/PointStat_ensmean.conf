# Ensemble mean {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{fhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped

{{METPLUS_TOOL_NAME}}_OBS_QUALITY_INC = 0, 1, 2, 3, 9, NA
#{{METPLUS_TOOL_NAME}}_OBS_QUALITY_EXC =

{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD = NEAREST
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =

#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE =
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 2

#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECNT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RPS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MPR =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ORANK =

{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True

#{{METPLUS_TOOL_NAME}}_HSS_EC_VALUE =

#
# Observation data time window(s).
#
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = {OBS_WINDOW_END}

# Optional list of offsets to look for point observation data
{{METPLUS_TOOL_NAME}}_OFFSETS = 0
#
# Name to identify model (forecast) data in output.
#
# The variable MODEL is recorded in the stat files, and the data in
# these files is then plotted (e.g. using METViewer).  Here, we add a
# suffix to MODEL that identifies the data as that for the ensemble
# mean.  This makes it easier to identify each curve.
#
MODEL = {{vx_fcst_model_name}}_ensmean
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Value to enter under the DESC column in the output stat file.
#
{{METPLUS_TOOL_NAME}}_DESC = NA

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = NONE
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2

{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}

# sets the -obs_valid_beg command line argument (optional)
# not used for this example
#{{METPLUS_TOOL_NAME}}_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# sets the -obs_valid_end command line argument (optional)
# not used for this example
#{{METPLUS_TOOL_NAME}}_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
{{METPLUS_TOOL_NAME}}_GRID =

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the METplus {{MetplusToolName}} configuration file.
{{METPLUS_TOOL_NAME}}_POLY = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
{{METPLUS_TOOL_NAME}}_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = {{fieldname_in_met_filedir_names}}

# set to True to run {{MetplusToolName}} once for each name/level combination
# set to False to run {{MetplusToolName}} once per run time including all fields
{{METPLUS_TOOL_NAME}}_ONCE_PER_FIELD = False
#
# List of forecast and corresponding observation fields to process.
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Set the probabilistic threshold to be used for the forecast field.  If
necessary, this can be changed to be an input parameter in the calling
script instead of a hard-coded value as below.
#}
{%- set thresh_fcst_prob = '==0.1' %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja
scoping rules).  Define such variables.
#}
{%- set level_fcst = '' %}
{%- set level_obs = '' %}
{%- set indx_level_fcst = '' %}

{%- set valid_threshes_fcst = [] %}
{%- set valid_threshes_obs = [] %}
{%- set threshes_fcst = '' %}
{%- set threshes_obs = '' %}
{%- set indx_input_thresh_fcst = '' %}

{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}
{%- set tmp = '' %}
{%- set error_msg = '' %}

{#-
Make sure that the set of field groups for forecasts and observations
are identical.
#}
{%- set fgs_fcst = vx_config_dict['fcst'].keys()|list %}
{%- set fgs_obs = vx_config_dict['obs'].keys()|list %}
{%- if (fgs_fcst != fgs_obs) %}
  {%- set error_msg = '\n' ~
'The list of valid field groups for forecasts (fgs_fcst) must be identical\n' ~
'to that for observations (fgs_obs) but isn\'t:\n' ~
'  fgs_fcst = ' ~ fgs_fcst ~ '\n' ~
'  fgs_obs = ' ~ fgs_obs %}
  {{metplus_macros.print_err_and_quit(error_msg)}}
{%- endif %}

{#-
Extract the lists of forecast and observation dictionaries containing
the valid fields, levels, and thresholds corresponding to the specified
field group (input_field_group).  Note that it would be simpler to have
these be just dictionaries in which the keys are the field names (instead
of them being LISTS of dictionaries in which each dictionary contains a
single key that is the field name), but that approach cannot be used here
because it is possible for field names to be repeated (for both forecasts
and observations).  For example, in the observations, the field name
'PRWE' appears more than once, each time with a different threshold, and
the combination of name and threshold is what constitutes a unique field,
not just the name by itself.
#}
{%- set fields_levels_threshes_fcst = vx_config_dict['fcst'][input_field_group] %}
{%- set fields_levels_threshes_obs = vx_config_dict['obs'][input_field_group] %}

{#-
Reset the specified forecast level so that if it happens to be an
accumulation (e.g. 'A03'), the leading zeros in front of the hour are
stipped out (e.g. reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Ensure that the specified input forecast level(s) (input_level_fcst) and
threshold(s) (input_thresh_fcst) are valid, i.e. that they are in the
set(s) of valid forecast levels and thresholds, respectively, specified
in fields_levels_threshes_fcst.
#}
{{- metplus_macros.check_level(fields_levels_threshes_fcst, input_level_fcst) }}
{{- metplus_macros.check_thresh(fields_levels_threshes_fcst, input_level_fcst, input_thresh_fcst) }}

{#-
Some fields in the specified field group (input_field_group) may need to
be excluded from the METplus config file because calculating means for
them doesn't make sense.  List these (for each input_field_group) in the
following dictionary.
#}
{%- set fields_fcst_to_exclude_by_field_group =
      {'APCP': [],
       'ASNOW': [],
       'REFC': [],
       'RETOP': [],
       'ADPSFC': ['TCDC', 'VIS', 'HGT'],
       'ADPUPA': []}  %}
{%- set fields_fcst_to_exclude = fields_fcst_to_exclude_by_field_group[input_field_group] %}

{#-
For convenience, create lists of valid forecast and observation field
names.
#}
{%- set num_valid_fields_fcst = fields_levels_threshes_fcst|length %}
{%- set valid_fields_fcst = [] %}
{%- for i in range(0,num_valid_fields_fcst) %}
  {%- set field = fields_levels_threshes_fcst[i].keys()|list|join('') %}
  {%- set tmp = valid_fields_fcst.append(field) %}
{%- endfor %}

{%- set valid_fields_obs = [] %}
{%- set num_valid_fields_obs = fields_levels_threshes_obs|length %}
{%- for i in range(0,num_valid_fields_obs) %}
  {%- set field = fields_levels_threshes_obs[i].keys()|list|join('') %}
  {%- set tmp = valid_fields_obs.append(field) %}
{%- endfor %}

{#-
Ensure that the number of valid fields for forecasts is equal to that
for the observations.
#}
{%- set num_valid_fields = 0 %}
{%- if (num_valid_fields_fcst != num_valid_fields_obs) %}
  {%- set error_msg = '\n' ~
'The number of valid forecast fields (num_valid_fields_fcst) must be\n' ~
'equal to the number of valid observation fields (num_valid_fields_obs)\n' ~
'but isn\'t:\n' ~
'  num_valid_fields_fcst = ' ~ num_valid_fields_fcst ~ '\n' ~
'  num_valid_fields_obs = ' ~ num_valid_fields_obs ~ '\n' ~
'The lists of valid forecast and observation fields are:\n' ~
'  valid_fields_fcst = ' ~ valid_fields_fcst ~ '\n' ~
'  valid_fields_obs = ' ~ valid_fields_obs ~ '\n' %}
  {{metplus_macros.print_err_and_quit(error_msg)}}
{%- else %}
  {%- set num_valid_fields = num_valid_fields_fcst %}
{%- endif %}

{#-
Loop over the valid fields and set field names, levels, thresholds, and/
or options for each field, both for forecasts and for obseratiions, in
the METplus configuration file.
#}
{%- set ns = namespace(var_count = 0) %}

{%- for i in range(0,num_valid_fields) if valid_fields_fcst[i] not in fields_fcst_to_exclude %}

  {%- set field_fcst = valid_fields_fcst[i] %}
  {%- set field_obs = valid_fields_obs[i] %}

{#-
For convenience, create lists of valid forecast and observation levels
for the current field.  Then check that the number of valid levels for
forecasts is the same as that for observations.
#}
  {%- set valid_levels_fcst = fields_levels_threshes_fcst[i][field_fcst].keys()|list %}
  {%- set valid_levels_obs = fields_levels_threshes_obs[i][field_obs].keys()|list %}

{#-
Extract dictionary of valid forecast levels (the dictionary keys) and
corresponding lists of valid thresholds (the values) for each level.
Then loop over these levels and corresponding lists of thresholds to set
both the forecast and observation field names, levels, thresholds, and/or
options.
#}
  {%- set valid_levels_threshes_fcst = fields_levels_threshes_fcst[i][field_fcst] %}
  {%- for level_fcst, valid_threshes_fcst in valid_levels_threshes_fcst.items() %}

    {%- if (input_level_fcst == 'all') or (input_level_fcst == level_fcst) %}
{#-
Increment the METplus variable counter.
#}
      {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.
#}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{level_fcst}}_ENS_MEAN

{#-
Set forecast field level.
#}
FCST_VAR{{ns.var_count}}_LEVELS = {{level_fcst}}

{#-
Set forecast field threshold(s).  Note that no forecast thresholds are
included in the METplus configuration file if input_thresh_fcst is set
to 'none'.
#}
      {%- if (input_thresh_fcst != 'none') %}
{#-
If input_thresh_fcst is set to 'all', set the list of forecast thresholds
to the full set of valid values.
#}
        {%- if (input_thresh_fcst == 'all') %}

          {%- set threshes_fcst = valid_threshes_fcst %}
{#-
If input_thresh_fcst is set to a specific value:
  1) Ensure that input_thresh_fcst exists in the list of valid forecast
     thresholds.
  2) Get the index of input_thresh_fcst in the list of valid forecast
     thresholds.  This will be needed later below when setting the
     observation threshold(s).
  3) Use this index to set the forecast threshold to a one-element list
     containing the specified forecast threshold.
#}
        {%- else %}

          {%- if input_thresh_fcst not in valid_threshes_fcst %}
            {%- set error_msg = '\n' ~
'For the current forecast field (field_fcst) and forecast level (level_fcst),\n' ~
'the input forecast threshold (input_thresh_fcst) does not exist in the list\n' ~
'of valid forecast thresholds (valid_threshes_fcst):\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  level_fcst = ' ~ level_fcst ~ '\n' ~
'  valid_threshes_fcst = ' ~ valid_threshes_fcst ~ '\n' ~
'  input_thresh_fcst = ' ~ input_thresh_fcst ~ '\n' %}
            {{metplus_macros.print_err_and_quit(error_msg)}}
          {%- endif %}
          {%- set indx_input_thresh_fcst = valid_threshes_fcst.index(input_thresh_fcst) %}
          {%- set threshes_fcst = [valid_threshes_fcst[indx_input_thresh_fcst]] %}

        {%- endif %}
{#-
If threshes_fcst has been reset to something other than its default
value of an empty list, then set the forecast thresholds in the METplus
configuration file because that implies threshes_fcst was set above to
a non-empty value.  Then reset threshes_fcst to its default value for
proper processing of thresholds for the next field.
#}
        {%- if (threshes_fcst != []) %}
FCST_VAR{{ns.var_count}}_THRESH = {{threshes_fcst|join(', ')}}
        {%- endif %}
        {%- set threshes_fcst = [] %}

      {%- endif %}

{#-
Set forecast field options.
#}
      {%- set opts_indent_len = 20 %}
      {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
        {%- set opts_indent_len = opts_indent_len + 1 %}
      {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
        {%- set opts_indent_len = opts_indent_len + 2 %}
      {%- elif (ns.var_count > 999) %}
        {%- set opts_indent_len = opts_indent_len + 3 %}
      {%- endif %}
      {%- set opts_indent = ' '*opts_indent_len %}

      {%- if input_field_group == 'ADPUPA' %}

        {%- if field_fcst == 'CAPE' %}
FCST_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
        {%- endif %}

      {%- endif %}

{#-
Set observation field name.
#}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}

{#-
Set observation field level.
#}
      {%- set indx_level_fcst = valid_levels_fcst.index(level_fcst) %}
      {%- set level_obs = valid_levels_obs[indx_level_fcst] %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}

{#-
Set observation field threshold(s).  Note that no observation thresholds
are included in the METplus configuration file if input_thresh_fcst is
set to 'none'.
#}
      {%- if (input_thresh_fcst != 'none') %}
{#-
Set the list of valid observation thresholds to the one corresponding to
the current observation level (level_obs).
#}
        {%- set valid_threshes_obs = fields_levels_threshes_obs[i][field_obs][level_obs] %}
{#-
If input_thresh_fcst is set to 'all', set the list of observation thresholds
to the full set of valid values.
#}
        {%- if (input_thresh_fcst == 'all') %}

          {%- set threshes_obs = valid_threshes_obs %}
{#-
If input_thresh_fcst is set to a specific forecast threshold, then the
observation threshold is given by the element in the list of valid
observation thresholds that has the same index as that of input_thresh_fcst
in the list of valid forecast thresholds.
#}
        {%- else %}

          {%- set threshes_obs = [valid_threshes_obs[indx_input_thresh_fcst]] %}

        {%- endif %}
{#-
If threshes_obs has been reset to something other than its default value
of an empty list, then set the observation thresholds in the METplus
configuration file because that implies threshes_obs was set above to
a non-empty value.  Then reset threshes_obs to its default value for
proper processing of thresholds for the next field.
#}
        {%- if (threshes_obs != []) %}
OBS_VAR{{ns.var_count}}_THRESH = {{threshes_obs|join(', ')}}
        {%- endif %}
        {%- set threshes_obs = [] %}

      {%- endif %}

{#-
Set observation field options.
#}
      {%- set opts_indent_len = opts_indent_len - 1 %}
      {%- set opts_indent = ' '*opts_indent_len %}

      {%- if input_field_group == 'ADPUPA' %}

        {%- if field_obs == 'CAPE' %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
        {%- elif field_obs == 'PBL' %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
        {%- endif %}

      {%- endif %}

{#-
Print out a newline to separate the settings for the current field (both
forecast and observation settings) from those for the next field.
#}
      {{- '\n' }}

    {%- endif %}

  {%- endfor %}
{%- endfor %}
# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing observation input to {{MetplusToolName}}.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{obs_input_dir}}
#
# Directory containing forecast input to {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Directory in which to write output from {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
