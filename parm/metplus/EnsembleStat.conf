# {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{fhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped
#
# Name to identify model (forecast) data in output.
#
MODEL = {{vx_fcst_model_name}}

{{METPLUS_TOOL_NAME}}_DESC = NA
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Observation data time window(s).
#
{%- if field_group in ['APCP'] %}
OBS_FILE_WINDOW_BEGIN = 0
OBS_FILE_WINDOW_END = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = 0
{%- elif field_group in ['REFC', 'RETOP'] %}
OBS_FILE_WINDOW_BEGIN = -300
OBS_FILE_WINDOW_END = 300
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = 0
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = 0
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = {OBS_WINDOW_END}
{%- endif %}

# number of expected members for ensemble. Should correspond with the
# number of items in the list for FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE
{{METPLUS_TOOL_NAME}}_N_MEMBERS = {{num_ens_members}}

# ens.ens_thresh value in the MET config file
# threshold for ratio of valid files to expected files to allow app to run
{{METPLUS_TOOL_NAME}}_ENS_THRESH = 0.05

# ens.vld_thresh value in the MET config file
{{METPLUS_TOOL_NAME}}_ENS_VLD_THRESH = 1.0

FIELDNAME_IN_MET_FILEDIR_NAMES = {{fieldname_in_met_filedir_names}}
{%- if field_group in ['ADPSFC', 'ADPUPA'] %}

{{METPLUS_TOOL_NAME}}_OBS_QUALITY_INC = 0, 1, 2, 3, 9, NA
#{{METPLUS_TOOL_NAME}}_OBS_QUALITY_EXC =
{%- endif %}

# {{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE is not required.
# If the variable is not defined, or the value is not set, then the MET
# default is used.
{%- if field_group in ['APCP'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE = {MET_BASE}/table_files/obs_error_table.txt
{%- elif field_group in ['REFC', 'RETOP'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE =
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MET_OBS_ERR_TABLE = {MET_BASE}/table_files/obs_error_table.txt
{%- endif %}


# Used in the MET config file for: regrid to_grid field
{%- set comment_or_null = '' %}
{%- set regrid_to_grid = '' %}
{%- set regrid_method = '' %}
{%- if field_group in ['APCP'] %}
  {%- set comment_or_null = '' %}
  {%- set regrid_to_grid = 'FCST' %}
  {%- set regrid_method = 'BUDGET' %}
{%- elif field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '' %}
  {%- set regrid_to_grid = 'FCST' %}
  {%- set regrid_method = 'BUDGET' %}
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
  {%- set comment_or_null = '#' %}
  {%- set regrid_to_grid = 'NONE' %}
  {%- set regrid_method = 'BILIN' %}
{%- endif %}
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = {{regrid_to_grid}}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_METHOD = {{regrid_method}}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE

{{METPLUS_TOOL_NAME}}_CENSOR_THRESH =
{{METPLUS_TOOL_NAME}}_CENSOR_VAL =
{% if field_group in ['APCP'] %}
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE =
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = UNIQUE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = TRUE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = TRUE
{%- elif field_group in ['REFC', 'RETOP'] %}
# Should this parameter be set to something other than ADPSFC (maybe
# just leave empty) since we are not verifying surface fields?
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = ADPSFC
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = NONE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = TRUE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = FALSE
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = {{field_group}}
{{METPLUS_TOOL_NAME}}_DUPLICATE_FLAG = NONE
{{METPLUS_TOOL_NAME}}_SKIP_CONST = FALSE
{{METPLUS_TOOL_NAME}}_OBS_ERROR_FLAG = FALSE
{%- endif %}

{{METPLUS_TOOL_NAME}}_ENS_SSVAR_BIN_SIZE = 1.0
{{METPLUS_TOOL_NAME}}_ENS_PHIST_BIN_SIZE = 0.05

#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_DAY_INTERVAL = 31
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_HOUR_INTERVAL = 6

#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_DAY_INTERVAL = 31
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_HOUR_INTERVAL = 6

{% set comment_or_null = '' %}
{%- if field_group in ['APCP'] %}
  {%- set comment_or_null = '' %}
{%- elif field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '' %}
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
  {%- set comment_or_null = '#' %}
{%- endif %}
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = False
{% if field_group == 'APCP' %}
{{METPLUS_TOOL_NAME}}_MASK_GRID =
{%- elif field_group in ['REFC', 'RETOP'] %}
{{METPLUS_TOOL_NAME}}_MASK_GRID = FULL
{%- elif field_group in ['ADPSFC', 'ADPUPA'] %}
{{METPLUS_TOOL_NAME}}_MASK_GRID =
{%- endif %}

{{METPLUS_TOOL_NAME}}_CI_ALPHA = 0.05

{{METPLUS_TOOL_NAME}}_INTERP_FIELD = BOTH
{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
{{METPLUS_TOOL_NAME}}_INTERP_METHOD = NEAREST
{{METPLUS_TOOL_NAME}}_INTERP_WIDTH = 1

{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECNT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RPS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RHIST = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PHIST = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ORANK = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SSVAR = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RELP = STAT

{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_LATLON = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MEAN = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_STDEV = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MINUS = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_PLUS = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MIN = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_MAX = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_RANGE = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_VLD_COUNT = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_FREQUENCY = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_NEP = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_NMEP = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_RANK = FALSE
{{METPLUS_TOOL_NAME}}_ENSEMBLE_FLAG_WEIGHT = FALSE

{%- set fields_levels_threshes = field_groups_dict[field_group] %}
{#-
Import useful jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}
{#-
Reset the specified forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (i.e.
reset to 'A3').
#}
{%- set fcst_level = metplus_macros.get_accumulation_no_zero_pad(fcst_level) %}
{#-
Ensure that the level(s) and threshold(s) are valid.
#}
{{- metplus_macros.check_level(fields_levels_threshes, fcst_level) }}
{{- metplus_macros.check_thresh(fields_levels_threshes, fcst_level, fcst_thresh) }}

{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}
#
# Forecast and observation variables and levels as specified in the fcst
# field dictionary of the MET configuration file.  Specify as FCST_VARn_NAME,
# FCST_VARn_LEVELS, (optional) FCST_VARn_OPTION and OBS_VARn_NAME,
# OBS_VARn_LEVELS, (optional) OBS_VARn_OPTION.
#
{%- set field_obs = '' %}
{%- set level_obs = '' %}
{%- set ns = namespace(var_count = 0) %}
{%- for field, levels_threshes in fields_levels_threshes.items() %}
  {%- for level, threshes in levels_threshes.items() %}
    {%- if (fcst_level == 'all') or (fcst_level == level) %}
      {%- set ns.var_count = ns.var_count+1 %}
{#-
Set forecast field name.
#}
FCST_VAR{{ns.var_count}}_NAME = {{field}}
{#-
Set forecast field level(s).
#}
FCST_VAR{{ns.var_count}}_LEVELS = {{level}}
{#-
Set forecast field threshold(s).
#}
      {%- if (fcst_thresh != 'none') %}
        {%- if (fcst_thresh == 'all') %}
FCST_VAR{{ns.var_count}}_THRESH = {{threshes|join(', ')}}
        {%- else %}
FCST_VAR{{ns.var_count}}_THRESH = {{fcst_thresh}}
        {%- endif %}
      {%- endif %}
{#-
Set forecast field options.
#}
        {%- set opts_indent_len = 20 %}
        {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
          {%- set opts_indent_len = opts_indent_len + 1 %}
        {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
          {%- set opts_indent_len = opts_indent_len + 2 %}
        {%- elif (ns.var_count > 999) %}
          {%- set opts_indent_len = opts_indent_len + 3 %}
        {%- endif %}
        {%- set opts_indent = ' '*opts_indent_len %}
        {%- if field_group == 'APCP' %}
        {%- if field == 'APCP' %}
FCST_VAR{{ns.var_count}}_OPTIONS = ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}
      {%- elif field_group == 'REFC' %}
        {%- if field == 'REFC' %}
FCST_VAR{{ns.var_count}}_OPTIONS = ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}
      {%- elif field_group == 'RETOP' %}
        {%- if field == 'RETOP' %}
# Convert from meters to kilofeet.
FCST_VAR{{ns.var_count}}_OPTIONS = convert(x) = x * 3.28084 * 0.001;
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}
      {%- elif field_group == 'ADPSFC' %}
        {%- if field == 'HGT' %}
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}desc = "CEILING";
        {%- elif field == 'TCDC' %}
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 200;
{{opts_indent}}GRIB2_ipdtmpl_index=[27];
{{opts_indent}}GRIB2_ipdtmpl_val=[255];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field == 'VIS' %}
FCST_VAR{{ns.var_count}}_OPTIONS = interp = { type = [ { method = NEAREST; width = 1; } ]; }
        {%- elif field == 'WIND' %}
# Derive instantaneous 10-m wind from U/V components, overriding max 10-m wind.
FCST_VAR{{ns.var_count}}_OPTIONS = GRIB2_pdt = 0;
        {%- endif %}
      {%- elif field_group == 'ADPUPA' %}
        {%- if field == 'CAPE' %}
FCST_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
        {%- endif %}
      {%- endif %}
{#-
Set observation field name.
#}
      {%- set field_obs = field %}
      {%- if field_group == 'REFC' %}
        {%- if field == 'REFC' %}
          {%- set field_obs = 'MergedReflectivityQCComposite' %}
        {%- endif %}
      {%- elif field_group == 'RETOP' %}
        {%- if field == 'RETOP' %}
          {%- set field_obs = 'EchoTop18' %}
        {%- endif %}
      {%- elif field_group == 'ADPSFC' %}
        {%- if field == 'HGT' %}
          {%- set field_obs = 'CEILING' %}
        {%- endif %}
      {%- elif field_group == 'ADPUPA' %}
        {%- if field == 'HPBL' %}
          {%- set field_obs = 'PBL' %}
        {%- endif %}
      {%- endif %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}
{#-
Set observation field level(s).
#}
      {%- set level_obs = level %}
      {%- if field_group == 'REFC' %}
        {%- if field == 'REFC' %}
          {%- set level_obs = 'Z500' %}
        {%- endif %}
      {%- elif field_group == 'RETOP' %}
        {%- if field == 'RETOP' %}
          {%- set level_obs = 'Z500' %}
        {%- endif %}
      {%- elif field_group == 'ADPUPA' %}
        {%- if field == 'CAPE' %}
          {%- set level_obs = level_obs ~ '-100000' %}
        {%- endif %}
      {%- endif %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}
{#-
Set observation field threshold(s).
#}
      {%- if (fcst_thresh != 'none') %}
        {%- if (fcst_thresh == 'all') %}
OBS_VAR{{ns.var_count}}_THRESH = {{threshes|join(', ')}}
        {%- else %}
OBS_VAR{{ns.var_count}}_THRESH = {{fcst_thresh}}
        {%- endif %}
      {%- endif %}
{#-
Set observation field options.
#}
      {%- set opts_indent_len = opts_indent_len - 1 %}
      {%- set opts_indent = ' '*opts_indent_len %}
      {%- if field_group == 'APCP' %}
        {%- if field == 'APCP' %}
OBS_VAR{{ns.var_count}}_OPTIONS = {FCST_VAR{{ns.var_count}}_OPTIONS}
        {%- endif %}
      {%- elif field_group == 'REFC' %}
        {%- if field == 'REFC' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}
      {%- elif field_group == 'RETOP' %}
        {%- if field == 'RETOP' %}
# Convert from kilometers to kilofeet.
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = lt-20;
{{opts_indent}}censor_val = -20.0;
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}convert(x) = x * 3280.84 * 0.001;
{{opts_indent}}ens_ssvar_bin_size = 50.0;
{{opts_indent}}ens_phist_bin_size = 0.05;
        {%- endif %}
      {%- elif field_group == 'ADPSFC' %}
        {%- if field in ['DPT', 'TMP', 'WIND'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = obs_error = { flag = TRUE; dist_type = NONE; dist_parm = []; inst_bias_scale = 1.0; inst_bias_offset = 0.0; min = NA; max = NA; }
        {%- elif field == 'HGT' %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215
        {%- endif %}
      {%- elif field_group == 'ADPUPA' %}
        {%- if field in ['DPT', 'HGT', 'TMP', 'WIND'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = obs_error = { flag = TRUE; dist_type = NONE; dist_parm = []; inst_bias_scale = 1.0; inst_bias_offset = 0.0; min = NA; max = NA; }
        {%- elif field == 'CAPE' %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
        {%- elif field == 'HPBL' %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
        {%- endif %}
      {%- endif %}
      {{- '\n' }}
    {%- endif %}
  {%- endfor %}
{%- endfor %}
[dir]
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
#
# Point observation input directory for {{MetplusToolName}}.
#
{%- if field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR = {{obs_input_dir}}
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR =
{%- endif %}
#
# Grid observation input directory for {{MetplusToolName}}.
#
{%- if field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR =
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR = {{obs_input_dir}}
{%- endif %}
#
# Forecast model input directory for {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used
# in this example
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used
# in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Output directory for {{MetplusToolName}}.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for point observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_DIR.
#
{%- if field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_TEMPLATE = {{obs_input_fn_template}}
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_POINT_INPUT_TEMPLATE =
{%- endif %}
#
# Template for gridded observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_DIR.
#
{%- if field_group in ['ADPSFC', 'ADPUPA'] %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_TEMPLATE =
{%- else %}
OBS_{{METPLUS_TOOL_NAME}}_GRID_INPUT_TEMPLATE = {{obs_input_fn_template}}
{%- endif %}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
# Note that this can be a comma separated list of ensemble members
# or a single line, - filename wildcard characters may be used, ? or *.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{FIELDNAME_IN_MET_FILEDIR_NAMES}_{OBTYPE}_{lead?fmt=%H%M%S}L
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
#
# Variable used to specify one or more verification mask files for
# {{MetplusToolName}}.  Not used for this example.
#
{{METPLUS_TOOL_NAME}}_VERIFICATION_MASK_TEMPLATE = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
