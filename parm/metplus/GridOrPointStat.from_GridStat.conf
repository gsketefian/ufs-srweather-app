# {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{fhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times

# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped

# grid to remap data. Value is set as the 'to_grid' variable in the 'regrid' dictionary
# See MET User's Guide for more information
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = FCST
{{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BUDGET
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE

#{{METPLUS_TOOL_NAME}}_INTERP_FIELD = BOTH
#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = NEAREST
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 1

#{{METPLUS_TOOL_NAME}}_GRID_WEIGHT_FLAG =

#
# Name to identify model (forecast) data in output.
#
# The variable MODEL is recorded in the stat files, and the data in
# these files is then plotted (e.g. using METViewer).  Here, we add a
# suffix to MODEL that identifies the forecast ensemble member.  This
# makes it easier to identify each curve.
#
MODEL = {{vx_fcst_model_name}}_{{ensmem_name}}
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Value to enter under the DESC column in the output stat file.  Here,
# we store the value of the original lead in this column, i.e. the lead
# with zero corresponding to the actual start time of the forecast (which
# is (cdate - time_lag)), not to cdate.  This is just the lead in
# LEAD_SEQ with the time lag (time_lag) of the current forecast member
# added on.
#
# Uncomment this line only after upgrading to METplus 5.x.
#{{METPLUS_TOOL_NAME}}_DESC = {lead?fmt=%H%M%S?shift={{time_lag}}}
{{METPLUS_TOOL_NAME}}_DESC = NA

# List of variables to compare in {{MetplusToolName}} - FCST_VAR1 variables correspond
#  to OBS_VAR1 variables
# Note [FCST/OBS/BOTH]_{{METPLUS_TOOL_NAME}}_VAR<n>_NAME can be used instead if different evaluations
# are needed for different tools

{{METPLUS_TOOL_NAME}}_MET_CONFIG_OVERRIDES = cat_thresh = [NA]; cnt_thresh = [NA]; cnt_logic = UNION; wind_thresh = [NA]; wind_logic = UNION; ci_alpha = [0.05]; rank_corr_flag = FALSE;
#
# List of forecast and corresponding observation fields to process.
#
# Note on use of set_attr_lead and ensemble member time-lagging:
# -------------------------------------------------------------
# The set_attr_lead parameter appearing below in [FCST|OBS]_VAR<n>_OPTIONS
# specifies the lead to use both in naming of the output .stat and .nc
# files and for setting the lead values contained in those files.  This
# option causes MET/METplus to use the lead values in the variable LEAD_SEQ
# set above, which are the same for all ensemble forecast members (i.e.
# regardless of whether members are time lagged with respect to the
# nominal cycle date specified by cdate).  If set_attr_lead were not
# specified as below, then MET/METplus would get the lead from the input
# forecast file, and that would in general differ from one ensemble member
# to the next depending on whether the member is time-lagged.  That would
# cause confusion, so here, we always use lead values with zero lead
# corresponding to the nominal cdate.
#
{%- set fields_levels_threshes = field_groups_dict[field_group] %}
{#-
Import useful jinja macros and run setup tasks and sanity checks.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}
{#-
Reset the specified forecast level so that if it happens to be an accumulation
(e.g. 'A03'), the leading zeros in front of the hour are stipped out (i.e.
reset to 'A3').
#}
{%- set fcst_level = metplus_macros.get_accumulation_no_zero_pad(fcst_level) %}
{#-
Ensure that the level(s) and threshold(s) are valid.
#}
{{- metplus_macros.check_level(fields_levels_threshes, fcst_level) }}
{{- metplus_macros.check_thresh(fields_levels_threshes, fcst_level, fcst_thresh) }}


{%- set field_obs = '' %}
{%- set level_obs = '' %}
{%- set levels = '' %}
{%- set num_levels = '' %}
{%- set level = '' %}
{%- set threshes = '' %}
{%- set level_next = '' %}
{%- set threshes_next = '' %}
{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}
{%- set error_msg = '' %}
{%- set ns = namespace(var_count = 0) %}

{%- for field, levels_threshes in fields_levels_threshes.items() %}
  {%- set avail_levels = levels_threshes.keys()|list %}
  {%- set num_avail_levels = avail_levels|length %}
  {%- set threshes_all_avail_levels = levels_threshes.values()|list %}
  {%- if (fcst_level == 'all') or (fcst_level in avail_levels) %}
{#-
Increment the METplus variable counter.
#}
    {%- set ns.var_count = ns.var_count+1 %}
{#-
Set forecast field name.
#}
FCST_VAR{{ns.var_count}}_NAME = {{field}}
{#-
Set forecast field level(s).
#}
    {%- if (fcst_level == 'all') %}
FCST_VAR{{ns.var_count}}_LEVELS = {{avail_levels|join(', ')}}
    {%- else %}
FCST_VAR{{ns.var_count}}_LEVELS = {{fcst_level}}
    {%- endif %}
{#-
Set forecast field threshold(s).
#}
    {%- if (fcst_thresh != 'none') %}
      {%- if (fcst_thresh != 'all') %}
FCST_VAR{{ns.var_count}}_THRESH = {{fcst_thresh}}
{#-
If fcst_thresh is set to 'all' ...
#}
      {%- else %}
{#-
First, set the level from which the set of thresholds will be extracted.
This depends on the setting of fcst_level.
#}
        {%- if (fcst_level == 'all') %}
          {%- if (num_avail_levels > 1) %}
{#-
If fcst_level is set to 'all' and there is more than one level to be
verified for this field, then the set of thresholds for each level must
be identical to every other (likely all will be set to empty lists, i.e.
[]).  Check for this.
#}
            {%- if (fcst_level == 'all') and (num_avail_levels > 1) %}
              {%- for n in range(1,num_avail_levels) %}
                {%- set level = avail_levels[n-1] %}
                {%- set threshes = threshes_all_avail_levels[n-1] %}
                {%- set level_next = avail_levels[n] %}
                {%- set threshes_next = threshes_all_avail_levels[n] %}
                {%- if (threshes_next != threshes) %}
                  {%- set error_msg = '\n' ~
'When fcst_level is set to \'all\' and the current field (field) has more\n' ~
'than one level to be verified (i.e. num_avail_levels > 1), each level must have\n' ~
'the same set of thresholds.  However, the set of thresholds for the next\n' ~
'level (threshes_next, level_next) is not equal to that of the current\n' ~
'level (threshes,level):\n' ~
'  fcst_level = \'' ~ fcst_level ~ '\'\n' ~
'  field = \'' ~ field ~ '\'\n' ~
'  num_avail_levels = ' ~ num_avail_levels ~ '\n' ~
'  level = \'' ~ level ~ '\'\n' ~
'  threshes = ' ~ threshes ~ '\n' ~
'  level_next = \'' ~ level_next ~ '\'\n' ~
'  threshes_next = ' ~ threshes_next ~ '\n' ~
'Note that this restriction includes the order of the thresholds, i.e. the\n' ~
'set of thresholds for each level must be in the same order as for all other\n' ~
'levels.' %}
                  {{metplus_macros.print_err_and_quit(error_msg)}}
                {%- endif %}
              {%- endfor %}
            {%- endif %}
          {%- endif %}
{#-
If the check above passed, it means all the levels have the same set of
thresholds.  In this case, we can simply use the first (zeroth) level as
the one from which to get the thresholds.
#}
          {%- set level = avail_levels[0] %}
        {%- else %}
          {%- set level = fcst_level %}
        {%- endif %}
{#-
Now set the set of thresholds to the one corresponding to the value of
level.
#}
        {%- set threshes = levels_threshes[level] %}
        {%- if (threshes|length > 0) %}
FCST_VAR{{ns.var_count}}_THRESH = {{threshes|join(', ')}}
        {%- endif %}
      {%- endif %}
    {%- endif %}
{#-
Set forecast field options.
#}
    {%- set opts_indent_len = 20 %}
    {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
      {%- set opts_indent_len = opts_indent_len + 1 %}
    {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
      {%- set opts_indent_len = opts_indent_len + 2 %}
    {%- elif (ns.var_count > 999) %}
      {%- set opts_indent_len = opts_indent_len + 3 %}
    {%- endif %}
    {%- set opts_indent = ' '*opts_indent_len %}
    {%- if field_group == 'APCP' %}
      {%- if field == 'APCP' %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
      {%- endif %}
    {%- elif field_group == 'REFC' %}
      {%- if field == 'REFC' %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
      {%- endif %}
    {%- elif field_group == 'RETOP' %}
      {%- if field == 'RETOP' %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}convert(x) = x * 3.28084 * 0.001;
{{opts_indent}}cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
      {%- endif %}
    {%- elif field_group == 'ADPSFC' %}
      {%- if field in ['TMP', 'RH', 'DPT', 'UGRD', 'VGRD', 'PRMSL', 'GUST'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
      {%- elif field in ['WIND'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}GRIB2_pdt = 0;
      {%- elif field in ['TCDC'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}GRIB_lvl_typ = 200;
{{opts_indent}}GRIB2_ipdtmpl_index=[27];
{{opts_indent}}GRIB2_ipdtmpl_val=[255];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
      {%- elif field in ['VIS'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}censor_thresh = [>16090];
{{opts_indent}}censor_val = [16090];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
      {%- elif field in ['HGT'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}GRIB_lvl_typ = 215;
{{opts_indent}}desc = "CEILING";
      {%- endif %}
    {%- elif field_group == 'ADPUPA' %}
      {%- if field in ['TMP', 'RH', 'DPT', 'UGRD', 'VGRD', 'WIND', 'HGT', 'SPFH', 'HPBL'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
      {%- elif field in ['CAPE'] %}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";
{{opts_indent}}cnt_thresh = [ >0 ];
      {%- endif %}
    {%- endif %}
{#-
Set observation field name.
#}
    {%- set field_obs = field %}
    {%- if field_group == 'REFC' %}
      {%- if field == 'REFC' %}
        {%- set field_obs = 'MergedReflectivityQCComposite' %}
      {%- endif %}
    {%- elif field_group == 'RETOP' %}
      {%- if field == 'RETOP' %}
        {%- set field_obs = 'EchoTop18' %}
      {%- endif %}
    {%- elif field_group == 'ADPSFC' %}
      {%- if field == 'HGT' %}
        {%- set field_obs = 'CEILING' %}
      {%- elif field in ['CRAIN', 'CSNOW', 'CFRZR', 'CICEP'] %}
        {%- set field_obs = 'PRWE' %}
      {%- endif %}
    {%- elif field_group == 'ADPUPA' %}
      {%- if field == 'HPBL' %}
        {%- set field_obs = 'PBL' %}
      {%- endif %}
    {%- endif %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}
{#-
Set observation field level(s).
#}
    {%- if (fcst_level != 'all') %}
      {%- set level_obs = fcst_level %}
    {%- else %}
      {%- set level_obs = avail_levels|join(', ') %}
    {%- endif %}
{#-
Custom modifications to level_obs.  For now, this is applied only if
there is one level (either because a specific level is specified or all
levels are specified but there is only one available level.
#}
    {%- if (fcst_level != 'all') or ((fcst_level == 'all') and (num_avail_levels == 1)) %}
      {%- if (field_group == 'REFC') %}
        {%- if (field == 'REFC') %}
          {%- set level_obs = 'Z500' %}
        {%- endif %}
      {%- elif (field_group == 'RETOP') %}
        {%- if (field == 'RETOP') %}
          {%- set level_obs = 'Z500' %}
        {%- endif %}
      {%- elif (field_group == 'ADPSFC') %}
        {%- if (field_obs == 'PRWE') %}
          {%- set level_obs = 'Z0' %}
        {%- endif %}
      {%- elif field_group == 'ADPUPA' %}
        {%- if (field_obs == 'CAPE') %}
          {%- set level_obs = level_obs ~ '-100000' %}
        {%- endif %}
      {%- endif %}
    {%- endif %}
OBS_VAR{{ns.var_count}}_LEVELS = {{level_obs}}
{#-
Set observation field threshold(s).
#}
    {%- if (fcst_thresh != 'none') %}
      {%- if (fcst_thresh != 'all') %}
OBS_VAR{{ns.var_count}}_THRESH = {{fcst_thresh}}
      {%- else %}
        {%- if (field_group == 'ADPSFC') and (threshes|length == 1) and (field_obs == 'PRWE') %}
          {%- if (field == 'CRAIN') %}
OBS_VAR{{ns.var_count}}_THRESH = ge161&&le163
          {%- elif (field == 'CSNOW') %}
OBS_VAR{{ns.var_count}}_THRESH = ge171&&le173
          {%- elif (field == 'CFRZR') %}
OBS_VAR{{ns.var_count}}_THRESH = ge164&&le166
          {%- elif (field == 'CICEP') %}
OBS_VAR{{ns.var_count}}_THRESH = ge174&&le176
          {%- endif %}
        {%- else %}
          {%- if (threshes|length > 0) %}
OBS_VAR{{ns.var_count}}_THRESH = {{threshes|join(', ')}}
          {%- endif %}
        {%- endif %}
      {%- endif %}
    {%- endif %}
{#-
Set observation field options.
#}
    {%- set opts_indent_len = opts_indent_len - 1 %}
    {%- set opts_indent = ' '*opts_indent_len %}
    {%- if field_group == 'REFC' %}
      {%- if field == 'REFC' %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = [eq-999, <-20];
{{opts_indent}}censor_val = [-9999, -20];
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
      {%- endif %}
    {%- elif field_group == 'RETOP' %}
      {%- if field in ['RETOP'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = convert(x) = x * 3280.84 * 0.001;
{{opts_indent}}censor_thresh = [<=-9.84252,eq-3.28084];
{{opts_indent}}censor_val = [-9999,-16.4042];
{{opts_indent}}cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
      {%- endif %}
    {%- elif field_group == 'ADPSFC' %}
      {%- if field in ['WIND'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB2_pdt = 0;
      {%- elif field in ['VIS'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = [>16090];
{{opts_indent}}censor_val = [16090];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
      {%- elif field in ['HGT'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
      {%- endif %}
    {%- elif field_group == 'ADPUPA' %}
      {%- if field in ['CAPE'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
      {%- elif field in ['HPBL'] %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
      {%- endif %}
    {%- endif %}
  {%- endif %}
  {{- '\n' }}
{%- endfor %}
#
# Forecast data time window(s).
#
{%- set comment_or_null = '' %}
{%- set obs_window_abs_val = '0' %}
{%- if field_group in ['REFC', 'RETOP'] %}
  {%- set comment_or_null = '#' %}
  {%- set obs_window_abs_val = '300' %}
{%- endif %}
{{comment_or_null}}FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = 0
{{comment_or_null}}FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = 0
#
# Observation data time window(s).
#
{#-
Use integers for seconds, but int can be changed to float if there is a
need to go to sub-seconds.
#}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = {{ 0 - obs_window_abs_val|int }}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = {{ obs_window_abs_val|int }}

# MET {{MetplusToolName}} neighborhood values
# See the MET User's Guide {{MetplusToolName}} section for more information
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_FIELD = BOTH

# width value passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_WIDTH = 3,5,7

# shape value passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_SHAPE = SQUARE

# cov thresh list passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_COV_THRESH = >=0.5

# Set to true to run {{MetplusToolName}} separately for each field specified
# Set to false to create one run of {{MetplusToolName}} per run time that
#   includes all fields specified.
{{METPLUS_TOOL_NAME}}_ONCE_PER_FIELD = False
#
# Set to true if forecast data is probabilistic.
#
FCST_IS_PROB = False
#
# Only used if FCST_IS_PROB is true - sets probabilistic threshold
#
FCST_{{METPLUS_TOOL_NAME}}_PROB_THRESH = ==0.1

{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}

# Climatology data
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_DAY_INTERVAL =
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_HOUR_INTERVAL =

#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FILE_NAME =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_FIELD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_WIDTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_REGRID_SHAPE =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_TIME_INTERP_METHOD =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_MATCH_MONTH =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_DAY_INTERVAL =
#{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_HOUR_INTERVAL =

#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True

{{METPLUS_TOOL_NAME}}_MASK_GRID =

# Statistical output types
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV = BOTH
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTS = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_GRAD = BOTH
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_DMAP = NONE

# NetCDF matched pairs output file
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_VAR_NAME =
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_LATLON = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_RAW = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DIFF = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_CLIMO = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_CLIMO_CDP = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_WEIGHT = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_NBRHD = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_FOURIER = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_GRADIENT = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DISTANCE_MAP = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_APPLY_MASK = FALSE

# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing observation input to {{MetplusToolName}}.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{obs_input_dir}}
#
# Directory containing forecast input to {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Directory in which to write output from {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
#
# Variable used to specify one or more verification mask files for
# {{MetplusToolName}}.  Not used for this example.
#
{{METPLUS_TOOL_NAME}}_VERIFICATION_MASK_TEMPLATE = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
