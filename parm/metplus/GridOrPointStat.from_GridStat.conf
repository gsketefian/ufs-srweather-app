# {{MetplusToolName}} METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = {{MetplusToolName}}

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{fhr_list}}
#
# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
#
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {{ '{' ~ METPLUS_TOOL_NAME ~ '_OUTPUT_DIR}' }}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to {{MetplusToolName}}.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
{{METPLUS_TOOL_NAME}}_CONFIG_FILE = {PARM_BASE}/met_config/{{MetplusToolName}}Config_wrapped

{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
# grid to remap data. Value is set as the 'to_grid' variable in the 'regrid' dictionary
# See MET User's Guide for more information
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = FCST
{{METPLUS_TOOL_NAME}}_REGRID_VLD_THRESH = 0.5
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BUDGET
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{{METPLUS_TOOL_NAME}}_REGRID_SHAPE = SQUARE
{%- elif (METPLUSTOOLNAME == 'POINTSTAT') %}
# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
{{METPLUS_TOOL_NAME}}_REGRID_TO_GRID = NONE
{{METPLUS_TOOL_NAME}}_REGRID_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_REGRID_WIDTH = 2
{%- endif %}

{%- if (METPLUSTOOLNAME == 'POINTSTAT') %}
{{METPLUS_TOOL_NAME}}_OBS_QUALITY_INC = 0, 1, 2, 3, 9, NA
#{{METPLUS_TOOL_NAME}}_OBS_QUALITY_EXC =
{%- endif %}

{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
  {%- if (input_field_group == 'APCP') %}

#{{METPLUS_TOOL_NAME}}_INTERP_FIELD = BOTH
#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = NEAREST
#{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 1

#{{METPLUS_TOOL_NAME}}_GRID_WEIGHT_FLAG =
  {%- elif input_field_group in ['REFC', 'RETOP'] %}

{{METPLUS_TOOL_NAME}}_INTERP_FIELD = NONE
{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH = 1.0
{{METPLUS_TOOL_NAME}}_INTERP_SHAPE = SQUARE
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = NEAREST
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 1

{{METPLUS_TOOL_NAME}}_GRID_WEIGHT_FLAG = NONE
{%- elif (METPLUSTOOLNAME == 'POINTSTAT') %}
#{{METPLUS_TOOL_NAME}}_INTERP_VLD_THRESH =
#{{METPLUS_TOOL_NAME}}_INTERP_SHAPE =
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_METHOD = BILIN
{{METPLUS_TOOL_NAME}}_INTERP_TYPE_WIDTH = 2
  {%- endif %}
{%- endif %}
#
# Name to identify model (forecast) data in output.
#
# The variable MODEL is recorded in the stat files, and the data in
# these files is then plotted (e.g. using METViewer).  Here, we add a
# suffix to MODEL that identifies the forecast ensemble member.  This
# makes it easier to identify each curve.
#
MODEL = {{vx_fcst_model_name}}_{{ensmem_name}}
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
#
# Value to enter under the DESC column in the output stat file.  Here,
# we store the value of the original lead in this column, i.e. the lead
# with zero corresponding to the actual start time of the forecast (which
# is (cdate - time_lag)), not to cdate.  This is just the lead in
# LEAD_SEQ with the time lag (time_lag) of the current forecast member
# added on.
#
# Uncomment this line only after upgrading to METplus 5.x.
#{{METPLUS_TOOL_NAME}}_DESC = {lead?fmt=%H%M%S?shift={{time_lag}}}
{{METPLUS_TOOL_NAME}}_DESC = NA

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
{{METPLUS_TOOL_NAME}}_MASK_GRID =

{%- if (METPLUS_TOOL_NAME == 'POINTSTAT') %}
# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the METplus {{MetplusToolName}} configuration file.
{{METPLUS_TOOL_NAME}}_POLY = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
{{METPLUS_TOOL_NAME}}_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
{{METPLUS_TOOL_NAME}}_MESSAGE_TYPE = {{fieldname_in_met_filedir_names}}
{%- endif %}
{%- set indent_len = 0 %}
{%- if (METPLUS_TOOL_NAME == 'GRIDSTAT') %}
  {%- set indent_len = 33 %}
  {%- set indent = ' '*indent_len %}
#
# Overrides of MET configuration defaults.
#
{{METPLUS_TOOL_NAME}}_MET_CONFIG_OVERRIDES = cat_thresh = [NA];
{{opts_indent}}cnt_thresh = [NA];
{{opts_indent}}cnt_logic = UNION;
{{opts_indent}}wind_thresh = [NA];
{{opts_indent}}wind_logic = UNION;
{{opts_indent}}ci_alpha = [0.05];
{{opts_indent}}rank_corr_flag = FALSE;
{%- endif %}
#
# List of forecast and corresponding observation fields to process.
#
{%- if (METPLUS_TOOL_NAME == 'GRIDSTAT') %}
  {%- if input_field_group in ['APCP', 'ASNOW'] %}
# Note that for accumulated fields such as APCP and ASNOW, in the input
# forecast and observation files (which are generated by MET's PcpCombine
# tool) the accumulation period is appended to the field name, so the 
# same is done here.
#
  {%- endif %}
{%- endif %}
# Note on use of set_attr_lead and ensemble member time-lagging:
# -------------------------------------------------------------
# The set_attr_lead parameter appearing below in [FCST|OBS]_VAR<n>_OPTIONS
# specifies the lead to use both in naming of the output .stat and .nc
# files and for setting the lead values contained in those files.  This
# option causes MET/METplus to use the lead values in the variable LEAD_SEQ
# set above, which are the same for all ensemble forecast members (i.e.
# regardless of whether members are time lagged with respect to the
# nominal cycle date specified by cdate).  If set_attr_lead were not
# specified as below, then MET/METplus would get the lead from the input
# forecast file, and that would in general differ from one ensemble member
# to the next depending on whether the member is time-lagged.  That would
# cause confusion, so here, we always use lead values with zero lead
# corresponding to the nominal cdate.
#
{#-
Import the file containing jinja macros.
#}
{%- import metplus_templates_dir ~ '/metplus_macros.jinja' as metplus_macros %}

{#-
Jinja requires certain variables to be defined globally within the template
before they can be used in if-statements and other scopes (see Jinja
scoping rules).  Define such variables.
#}
{%- set levels_fcst = '' %}
{%- set levels_obs = '' %}
{%- set indx_input_level_fcst = '' %}

{%- set valid_threshes_fcst = [] %}
{%- set valid_threshes_obs = [] %}
{%- set threshes_fcst = [] %}
{%- set threshes_obs = [] %}
{%- set indx_input_thresh_fcst = '' %}

{%- set opts_indent = '' %}
{%- set opts_indent_len = '' %}
{%- set tmp = '' %}
{%- set error_msg = '' %}
{#-
Make sure that the set of field groups for forecasts and observations
are identical.
#}
{%- set fgs_fcst = vx_config_dict['fcst'].keys()|list %}
{%- set fgs_obs = vx_config_dict['obs'].keys()|list %}
{%- if (fgs_fcst != fgs_obs) %}
  {%- set error_msg = '\n' ~
'The list of valid field groups for forecasts (fgs_fcst) must be identical\n' ~
'to that for observations (fgs_obs) but isn\'t:\n' ~
'  fgs_fcst = ' ~ fgs_fcst ~ '\n' ~
'  fgs_obs = ' ~ fgs_obs %}
  {{metplus_macros.print_err_and_quit(error_msg)}}
{%- endif %}

{#-
Extract the lists of forecast and observation dictionaries containing
the valid fields, levels, and thresholds corresponding to the specified
field group (input_field_group).  Note that it would be simpler to have
these be just dictionaries in which the keys are the field names (instead
of them being LISTS of dictionaries in which each dictionary contains a
single key that is the field name), but that approach cannot be used here
because it is possible for field names to be repeated (for both forecasts
and observations).  For example, in the observations, the field name
'PRWE' appears more than once, each time with a different threshold, and
the combination of name and threshold is what constitutes a unique field,
not just the name by itself.
#}
{%- set fields_levels_threshes_fcst = vx_config_dict['fcst'][input_field_group] %}
{%- set fields_levels_threshes_obs = vx_config_dict['obs'][input_field_group] %}

{#-
Reset the specified forecast level so that if it happens to be an
accumulation (e.g. 'A03'), the leading zeros in front of the hour are
stipped out (e.g. reset to 'A3').
#}
{%- set input_level_fcst = metplus_macros.get_accumulation_no_zero_pad(input_level_fcst) %}

{#-
Ensure that the specified input forecast level(s) (input_level_fcst) and
threshold(s) (input_thresh_fcst) are valid, i.e. that they are in the
set(s) of valid forecast levels and thresholds, respectively, specified
in fields_levels_threshes_fcst.
#}
{{- metplus_macros.check_level(fields_levels_threshes_fcst, input_level_fcst) }}
{{- metplus_macros.check_thresh(fields_levels_threshes_fcst, input_level_fcst, input_thresh_fcst) }}

{#-
For convenience, create lists of valid forecast and observation field
names.
#}
{%- set num_valid_fields_fcst = fields_levels_threshes_fcst|length %}
{%- set valid_fields_fcst = [] %}
{%- for i in range(0,num_valid_fields_fcst) %}
  {%- set field = fields_levels_threshes_fcst[i].keys()|list|join('') %}
  {%- set tmp = valid_fields_fcst.append(field) %}
{%- endfor %}

{%- set valid_fields_obs = [] %}
{%- set num_valid_fields_obs = fields_levels_threshes_obs|length %}
{%- for i in range(0,num_valid_fields_obs) %}
  {%- set field = fields_levels_threshes_obs[i].keys()|list|join('') %}
  {%- set tmp = valid_fields_obs.append(field) %}
{%- endfor %}

{#-
Ensure that the number of valid fields for forecasts is equal to that
for the observations.
#}
{%- set num_valid_fields = 0 %}
{%- if (num_valid_fields_fcst != num_valid_fields_obs) %}
  {%- set error_msg = '\n' ~
'The number of valid forecast fields (num_valid_fields_fcst) must be\n' ~
'equal to the number of valid observation fields (num_valid_fields_obs)\n' ~
'but isn\'t:\n' ~
'  num_valid_fields_fcst = ' ~ num_valid_fields_fcst ~ '\n' ~
'  num_valid_fields_obs = ' ~ num_valid_fields_obs ~ '\n' ~
'The lists of valid forecast and observation fields are:\n' ~
'  valid_fields_fcst = ' ~ valid_fields_fcst ~ '\n' ~
'  valid_fields_obs = ' ~ valid_fields_obs ~ '\n' %}
  {{metplus_macros.print_err_and_quit(error_msg)}}
{%- else %}
  {%- set num_valid_fields = num_valid_fields_fcst %}
{%- endif %}

{#-
Loop over the valid fields and set field names, levels, thresholds, and/
or options for each field, both for forecasts and for obseratiions, in
the METplus configuration file.
#}
{%- set ns = namespace(var_count = 0) %}
{%- for i in range(0,num_valid_fields) %}

  {%- set field_fcst = valid_fields_fcst[i] %}
  {%- set field_obs = valid_fields_obs[i] %}

{#-
For convenience, create lists of valid forecast and observation levels
for the current field.  Then check that the number of valid levels for
forecasts is the same as that for observations.
#}
  {%- set valid_levels_fcst = fields_levels_threshes_fcst[i][field_fcst].keys()|list %}
  {%- set valid_levels_obs = fields_levels_threshes_obs[i][field_obs].keys()|list %}

  {%- set num_valid_levels = 0 %}
  {%- set num_valid_levels_fcst = valid_levels_fcst|length %}
  {%- set num_valid_levels_obs = valid_levels_obs|length %}
  {%- if (num_valid_levels_fcst != num_valid_levels_obs) %}
    {%- set error_msg = '\n' ~
'The number of valid forecast levels (num_valid_levels_fcst) must be\n' ~
'equal to the number of valid observation levels (num_valid_levels_obs)\n' ~
'but isn\'t:\n' ~
'  num_valid_levels_fcst = ' ~ num_valid_levels_fcst ~ '\n' ~
'  num_valid_levels_obs = ' ~ num_valid_levels_obs ~ '\n' %}
    {{metplus_macros.print_err_and_quit(error_msg)}}
  {%- else %}
    {%- set num_valid_levels = num_valid_levels_fcst %}
  {%- endif %}

{#-
Make sure that input_level_fcst is set to a valid value.
#}
  {%- if (input_level_fcst != 'all') and (input_level_fcst not in valid_levels_fcst) %}
    {%- set error_msg = '\n' ~
'The input forecast level (input_level_fcst) must either be set to \'all\',\n' ~
'or it must be set to one of the elements in the list of valid levels\n' ~
'(valid_levels_fcst) for the current forecast field (field_fcst).  This\n' ~
'is not the case:\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' %}
    {{metplus_macros.print_err_and_quit(error_msg)}}
  {%- endif %}

{#-
Increment the METplus variable counter.
#}
  {%- set ns.var_count = ns.var_count+1 %}

{#-
Set forecast field name.  Note that this has to exactly match the name
of the field in the input forecast file.

For accumulated fields, the input forecast file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the forecast
field name here (field_fcst) with the accumulation period appended to
it (separated by an underscore), so we must do the same here to get an
exact match.
#}
  {%- if (input_field_group in ['APCP', 'ASNOW']) %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}_{{accum_hh}}
  {%- else %}
FCST_VAR{{ns.var_count}}_NAME = {{field_fcst}}
  {%- endif %}

{#-
Set forecast field level(s).
#}
  {%- if (input_level_fcst == 'all') %}
    {%- set levels_fcst = valid_levels_fcst %}
{#-
If input_level_fcst is set to a specific value:
  1) Ensure that input_level_fcst exists in the list of valid forecast
     levels.
  2) Get the index of input_level_fcst in the list of valid forecast
     levels.  This will be needed later below when setting the observation
     level(s).
  3) Use this index to set the forecast level to a one-element list
     containing the specified forecast level.
#}
  {%- else %}
    {%- if input_level_fcst not in valid_levels_fcst %}
      {%- set error_msg = '\n' ~
'For the current forecast field (field_fcst), the input forecast level\n' ~
'(input_level_fcst) does not exist in the list of valid forecast levels\n' ~
'(valid_levels_fcst):\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  input_level_fcst = ' ~ input_level_fcst ~ '\n' ~
'  valid_levels_fcst = ' ~ valid_levels_fcst ~ '\n' %}
      {{metplus_macros.print_err_and_quit(error_msg)}}
    {%- endif %}
    {%- set indx_input_level_fcst = valid_levels_fcst.index(input_level_fcst) %}
    {%- set levels_fcst = [valid_levels_fcst[indx_input_level_fcst]] %}
  {%- endif %}
FCST_VAR{{ns.var_count}}_LEVELS = {{levels_fcst|join(', ')}}

{#-
Set forecast field threshold(s).  Note that no forecast thresholds are
included in the METplus configuration file if input_thresh_fcst is set
to 'none'.
#}
  {%- if (input_thresh_fcst != 'none') %}
{#-
If input_level_fcst is set to 'all' and there is more than one (forecast
or observation) level to be verified for the current (forecast or
observation) field, then the list of forecast thresholds for each forecast
level must be identical to every other.  Check for this.  Note that this
restriction includes the order of the thresholds, i.e. the set of
thresholds for each level must be in the same order as for all other
levels.
#}
    {%- if (input_level_fcst == 'all') and (num_valid_levels > 1) %}
      {{- metplus_macros.check_for_identical_threshes_by_level(
            field_fcst, fields_levels_threshes_fcst[i]) }}
    {%- endif %}
{#-
Now set the list of valid forecast thresholds to the one corresponding
to the first (zeroth) forecast level in the list of forecast levels set
above.  We can do this because, for the case of a single forecast level,
there is only one list of forecast thresholds to consider (the first
one), and for the case of all levels, all levels have the same set of
thresholds (as verified by the check above).
#}
    {%- set valid_threshes_fcst = fields_levels_threshes_fcst[i][field_fcst][levels_fcst[0]] %}
{#-
If input_thresh_fcst is set to 'all', set the list of forecast thresholds
to the full set of valid values.
#}
    {%- if (input_thresh_fcst == 'all') %}

      {%- set threshes_fcst = valid_threshes_fcst %}
{#-
If input_thresh_fcst is set to a specific value:
  1) Ensure that input_thresh_fcst exists in the list of valid forecast
     thresholds.
  2) Get the index of input_thresh_fcst in the list of valid forecast
     thresholds.  This will be needed later below when setting the
     observation threshold(s).
  3) Use this index to set the forecast threshold to a one-element list
     containing the specified forecast threshold.
#}
    {%- else %}

      {%- if input_thresh_fcst not in valid_threshes_fcst %}
        {%- set error_msg = '\n' ~
'For the current forecast field (field_fcst) and list of forecast level(s)\n' ~
'(levels_fcst), the input forecast threshold (input_thresh_fcst) does not\n' ~
'exist in the list of valid forecast thresholds (valid_threshes_fcst):\n' ~
'  field_fcst = ' ~ field_fcst ~ '\n' ~
'  levels_fcst = ' ~ levels_fcst ~ '\n' ~
'  valid_threshes_fcst = ' ~ valid_threshes_fcst ~ '\n' ~
'  input_thresh_fcst = ' ~ input_thresh_fcst ~ '\n' %}
        {{metplus_macros.print_err_and_quit(error_msg)}}
      {%- endif %}
      {%- set indx_input_thresh_fcst = valid_threshes_fcst.index(input_thresh_fcst) %}
      {%- set threshes_fcst = [valid_threshes_fcst[indx_input_thresh_fcst]] %}

    {%- endif %}
{#-
If threshes_fcst has been reset to something other than its default
value of an empty list, then set the forecast thresholds in the METplus
configuration file because that implies threshes_fcst was set above to
a non-empty value.  Then reset threshes_fcst to its default value for
proper processing of thresholds for the next field.
#}
    {%- if (threshes_fcst != []) %}
FCST_VAR{{ns.var_count}}_THRESH = {{threshes_fcst|join(', ')}}
    {%- endif %}
    {%- set threshes_fcst = [] %}

  {%- endif %}

{#-
Set forecast field options.
#}
FCST_VAR{{ns.var_count}}_OPTIONS = set_attr_lead = "{lead?fmt=%H%M%S}";

  {%- set opts_indent_len = 20 %}
  {%- if (ns.var_count > 9) and (ns.var_count <= 99) %}
    {%- set opts_indent_len = opts_indent_len + 1 %}
  {%- elif (ns.var_count > 99) and (ns.var_count <= 999) %}
    {%- set opts_indent_len = opts_indent_len + 2 %}
  {%- elif (ns.var_count > 999) %}
    {%- set opts_indent_len = opts_indent_len + 3 %}
  {%- endif %}
  {%- set opts_indent = ' '*opts_indent_len %}

  {%- if (input_field_group == 'REFC') %}

    {%- if (field_fcst == 'REFC') %}
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
    {%- endif %}

  {%- elif (input_field_group == 'RETOP') %}

    {%- if (field_fcst == 'RETOP') %}
{{opts_indent}}convert(x) = x * 3.28084 * 0.001;
{{opts_indent}}cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
    {%- endif %}

  {%- elif (input_field_group == 'ADPSFC') %}

    {%- if (field_fcst in ['WIND']) %}
{{opts_indent}}GRIB2_pdt = 0; ;; Derive instantaneous 10-m wind from U/V components, overriding max 10-m wind.
    {%- elif (field_fcst in ['TCDC']) %}
{{opts_indent}}GRIB_lvl_typ = 200;
{{opts_indent}}GRIB2_ipdtmpl_index=[27];
{{opts_indent}}GRIB2_ipdtmpl_val=[255];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
    {%- elif (field_fcst in ['VIS']) %}
{{opts_indent}}censor_thresh = [>16090];
{{opts_indent}}censor_val = [16090];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
    {%- elif (field_fcst in ['HGT']) %}
{{opts_indent}}GRIB_lvl_typ = 215;
{{opts_indent}}desc = "CEILING";
    {%- endif %}

  {%- elif (input_field_group == 'ADPUPA') %}

    {%- if (field_fcst in ['HGT']) %}
      {%- if (levels_fcst[0] in ['L0']) %}
{{opts_indent}}GRIB_lvl_typ = 220;
      {%- endif %}
    {%- elif (field_fcst in ['CAPE']) %}
{{opts_indent}}cnt_thresh = [ >0 ];
    {%- endif %}

  {%- endif %}

{#-
Set observation field name.  Note that this has to exactly match the name
of the field in the input observation file.

For accumulated fields, the input observation file is generated by MET's
PcpCombine tool.  In that file, the field name consists of the observation 
field name here (field_obs) with the accumulation period appended to it
(separated by an underscore), so we must do the same here to get an exact
match.

Note:
Turns out for ASNOW, PcpCombine is not run for obs, so we exclude that
from the "if" clause here (so it goes into the "else").  For workflow
behavior uniformity between APCP and ASNOW, consider running PcpCombine
for ASNOW observations as well (just as it's run for APCP observations).
  {%- if (input_field_group in ['APCP', 'ASNOW']) %}
#}
  {%- if (input_field_group in ['APCP']) %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}_{{accum_hh}}
  {%- else %}
OBS_VAR{{ns.var_count}}_NAME = {{field_obs}}
  {%- endif %}

{#-
Set observation field level(s).
#}
  {%- if (input_level_fcst == 'all') %}
    {%- set levels_obs = valid_levels_obs %}
{#-
If input_level_fcst is set to a specific forecast level, then the
observation level is given by the element in the list of valid observation
levels that has the same index as that of input_level_fcst in the list
of valid forecast levels.
#}
  {%- else %}
    {%- set levels_obs = [valid_levels_obs[indx_input_level_fcst]] %}
  {%- endif %}
OBS_VAR{{ns.var_count}}_LEVELS = {{levels_obs|join(', ')}}

{#-
Set observation field threshold(s).  Note that no observation thresholds
are included in the METplus configuration file if input_thresh_fcst is
set to 'none'.
#}
  {%- if (input_thresh_fcst != 'none') %}
{#-
If input_level_fcst is set to 'all' and there is more than one (forecast
or observation) level to be verified for the current (forecast or
observation) field, then the list of observation thresholds for each
observation level must be identical to every other.  Check for this.
Note that this restriction includes the order of the thresholds, i.e.
the set of thresholds for each level must be in the same order as for
all other levels.
#}
    {%- if (input_level_fcst == 'all') and (num_valid_levels > 1) %}
      {{- metplus_macros.check_for_identical_threshes_by_level(
            field_obs, fields_levels_threshes_obs[i]) }}
    {%- endif %}
{#-
Now set the list of valid observation thresholds to the one corresponding
to the first (zeroth) observation level in the list of observation levels
set above.  We can do this because, for the case of a single observaton
level, there is only one list of observation thresholds to consider (the
first one), and for the case of all levels, all levels have the same set
of thresholds (as verified by the check above).
#}
    {%- set valid_threshes_obs = fields_levels_threshes_obs[i][field_obs][levels_obs[0]] %}
{#-
If input_thresh_fcst is set to 'all', set the list of observation thresholds
to the full set of valid values.
#}
    {%- if (input_thresh_fcst == 'all') %}

      {%- set threshes_obs = valid_threshes_obs %}
{#-
If input_thresh_fcst is set to a specific forecast threshold, then the
observation threshold is given by the element in the list of valid
observation thresholds that has the same index as that of input_thresh_fcst
in the list of valid forecast thresholds.
#}
    {%- else %}

      {%- set threshes_obs = [valid_threshes_obs[indx_input_thresh_fcst]] %}

    {%- endif %}
{#-
If threshes_obs has been reset to something other than its default value
of an empty list, then set the observation thresholds in the METplus
configuration file because that implies threshes_obs was set above to
a non-empty value.  Then reset threshes_obs to its default value for
proper processing of thresholds for the next field.
#}
    {%- if (threshes_obs != []) %}
OBS_VAR{{ns.var_count}}_THRESH = {{threshes_obs|join(', ')}}
    {%- endif %}
    {%- set threshes_obs = [] %}

  {%- endif %}

{#-
Set observation field options.
#}
  {%- set opts_indent_len = opts_indent_len - 1 %}
  {%- set opts_indent = ' '*opts_indent_len %}

  {%- if (input_field_group == 'ASNOW') %}

    {%- if (field_obs == 'ASNOW') %}
OBS_VAR{{ns.var_count}}_OPTIONS = convert(x) = 100.0*x;
    {%- endif %}

  {%- elif (input_field_group == 'REFC') %}

    {%- if (field_obs == 'MergedReflectivityQCComposite') %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = [eq-999, <-20];
{{opts_indent}}censor_val = [-9999, -20];
{{opts_indent}}cnt_thresh = [ >15 ];
{{opts_indent}}cnt_logic = UNION;
    {%- endif %}

  {%- elif (input_field_group == 'RETOP') %}

    {%- if (field_obs in ['EchoTop18']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = convert(x) = x * 3280.84 * 0.001;
{{opts_indent}}censor_thresh = [<=-9.84252,eq-3.28084];
{{opts_indent}}censor_val = [-9999,-16.4042];
{{opts_indent}}cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
    {%- endif %}

  {%- elif (input_field_group == 'ADPSFC') %}

    {%- if (field_obs in ['WIND']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB2_pdt = 0; ;; Derive instantaneous 10-m wind from U/V components, overriding max 10-m wind.
    {%- elif (field_obs in ['VIS']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = censor_thresh = [>16090];
{{opts_indent}}censor_val = [16090];
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
    {%- elif (field_obs in ['CEILING']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = GRIB_lvl_typ = 215;
{{opts_indent}}interp = { type = [ { method = NEAREST; width = 1; } ]; }
    {%- endif %}

  {%- elif (input_field_group == 'ADPUPA') %}

    {%- if (field_obs in ['CAPE', 'MLCAPE']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = cnt_thresh = [ >0 ];
{{opts_indent}}cnt_logic = UNION;
    {%- elif (field_obs in ['PBL']) %}
      {%- if (field_fcst in ['HPBL']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "TKE";
      {%- elif (field_fcst in ['HGT']) %}
OBS_VAR{{ns.var_count}}_OPTIONS = desc = "RI";
      {%- endif %}
    {%- endif %}

  {%- endif %}

{#-
Print out a newline to separate the settings for the current field (both
forecast and observation settings) from those for the next field.
#}
  {{- '\n' }}

{%- endfor %}

{%- if (METPLUS_TOOL_NAME == 'GRIDSTAT') %}
  {%- if (input_field_group in ['APCP', 'ASNOW']) %}
#
# Forecast data time window(s).
#
FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = 0
FCST_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = 0
  {%- endif %}
{%- endif %}
#
# Observation data time window(s).
#
{%- set obs_window_begin = 0 %}
{%- set obs_window_end = 0 %}
{%- if (METPLUS_TOOL_NAME == 'GRIDSTAT') %}
  {%- if (input_field_group in ['REFC', 'RETOP']) %}
    {%- set obs_window_begin = -300 %}
    {%- set obs_window_end = 300 %}
  {%- endif %}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_BEGIN = {{obs_window_begin}}
OBS_{{METPLUS_TOOL_NAME}}_FILE_WINDOW_END = {{obs_window_end}}
{%- elif (METPLUS_TOOL_NAME == 'POINTSTAT') %}
  {%- set obs_window_begin = -1799 %}
  {%- set obs_window_end = 1800 %}
OBS_WINDOW_BEGIN = {{obs_window_begin}}
OBS_WINDOW_END = {{obs_window_end}}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
OBS_{{METPLUS_TOOL_NAME}}_WINDOW_END = {OBS_WINDOW_END}

# Optional list of offsets to look for point observation data
{{METPLUS_TOOL_NAME}}_OFFSETS = 0
{%- endif %}

{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
# MET {{MetplusToolName}} neighborhood values
# See the MET User's Guide {{MetplusToolName}} section for more information
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_FIELD = BOTH

# width value passed to nbrhd dictionary in the MET config file
{%- if (input_field_group in ['APCP']) %}
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_WIDTH = 3,5,7
{%- elif (input_field_group in ['ASNOW']) %}
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_WIDTH = 5
{%- elif (input_field_group in ['REFC', 'RETOP']) %}
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_WIDTH = 1,3,5,7
{%- endif %}

# shape value passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_SHAPE = SQUARE

# cov thresh list passed to nbrhd dictionary in the MET config file
{{METPLUS_TOOL_NAME}}_NEIGHBORHOOD_COV_THRESH = >=0.5
{%- endif %}
#
# Set to True to run {{MetplusToolName}} separately for each field specified;
# set to False to run {{MetplusToolName}} once per run time that includes all
# fields specified.
#
{{METPLUS_TOOL_NAME}}_ONCE_PER_FIELD = False

{{METPLUS_TOOL_NAME}}_OUTPUT_PREFIX = {MODEL}_{{fieldname_in_met_filedir_names}}_{OBTYPE}

# Climatology data
{%- set comment_or_null = '' %}
{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
#{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD =
  {%- if (input_field_group in ['APCP', 'ASNOW']) %}
    {%- set comment_or_null = '#' %}
  {%- endif %}

{{comment_or_null}}{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True
{%- elif (METPLUSTOOLNAME == 'POINTSTAT') %}
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_TIME_INTERP_METHOD = NEAREST

{{METPLUS_TOOL_NAME}}_CLIMO_CDF_BINS = 1
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_CENTER_BINS = False
#{{METPLUS_TOOL_NAME}}_CLIMO_CDF_WRITE_BINS = True
{%- endif %}

# Statistical output types
{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS = NONE
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC = NONE
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV = BOTH
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCTS = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_NBRCNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_GRAD = BOTH
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_DMAP = NONE
{%- elif (METPLUSTOOLNAME == 'POINTSTAT') %}
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_FHO = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTC = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CTS = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MCTS =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_CNT = STAT
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SL1L2 = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_SAL1L2 =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VL1L2 = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VAL1L2 =
{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_VCNT = STAT
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PCT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PSTD =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PJC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_PRC =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECNT =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_RPS =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ECLV =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_MPR =
#{{METPLUS_TOOL_NAME}}_OUTPUT_FLAG_ORANK =
{%- endif %}

{%- if (METPLUSTOOLNAME == 'GRIDSTAT') %}
# NetCDF matched pairs output file
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_VAR_NAME =
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_LATLON = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_RAW = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DIFF = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_CLIMO = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_CLIMO_CDP = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_WEIGHT = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_NBRHD = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_FOURIER = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_GRADIENT = FALSE
#{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_DISTANCE_MAP = FALSE
{{METPLUS_TOOL_NAME}}_NC_PAIRS_FLAG_APPLY_MASK = FALSE
{%- endif %}

# End of [config] section and start of [dir] section.
[dir]
#
# Directory containing observation input to {{MetplusToolName}}.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{obs_input_dir}}
#
# Directory containing forecast input to {{MetplusToolName}}.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR = {{fcst_input_dir}}
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR =
#
# Directory containing climatology mean input to {{MetplusToolName}}.  Not used in
# this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR =
#
# Directory in which to write output from {{MetplusToolName}}.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
{{METPLUS_TOOL_NAME}}_OUTPUT_DIR = {{output_dir}}
#
# Directory for staging data.
#
STAGING_DIR = {{staging_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for observation input to {{MetplusToolName}} relative to
# OBS_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
OBS_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for forecast input to {{MetplusToolName}} relative to
# FCST_{{METPLUS_TOOL_NAME}}_INPUT_DIR.
#
FCST_{{METPLUS_TOOL_NAME}}_INPUT_TEMPLATE = {{fcst_input_fn_template}}
#
# Template for output from {{MetplusToolName}} relative to {{METPLUS_TOOL_NAME}}_OUTPUT_DIR.
#
{{METPLUS_TOOL_NAME}}_OUTPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_MEAN_INPUT_TEMPLATE =
#
# Template for climatology input to {{MetplusToolName}} relative to
# {{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_DIR.  Not used in this example.
#
{{METPLUS_TOOL_NAME}}_CLIMO_STDEV_INPUT_TEMPLATE =
{#-
Not sure if the following section for ..._VERIFICATION_MASK_TEMPLATE
is also nececcary for PointStat.
#}
{%- if (METPLUS_TOOL_NAME == 'GRIDSTAT') %}
#
# Variable used to specify one or more verification mask files for
# {{MetplusToolName}}.  Not used for this example.
#
{{METPLUS_TOOL_NAME}}_VERIFICATION_MASK_TEMPLATE = {MET_INSTALL_DIR}/share/met/poly/CONUS.poly
{%- endif %}
